# -*- coding: utf-8 -*-
"""project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UxPgiBw8NQGOY1DWAjCdnpbpWvuK59Eh
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.decomposition import PCA # dimensionality reduction
from sklearn.cluster import KMeans
from sklearn.cluster import AgglomerativeClustering
import scipy.cluster.hierarchy as sch
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.linear_model import SGDRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import median_absolute_error
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

#import urllib
#print("Password/Enpoint IP for localtunnel is:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

#!pip install -q streamlit

import streamlit as st
import pandas as pd

# Function to process the uploaded file
def process_file(uploaded_file):
    if uploaded_file is not None:
        # Read the uploaded file as a DataFrame
        df = pd.read_csv(uploaded_file)
        # Display the DataFrame
        st.write(df)

# Main function for Streamlit app
def main():
    st.title("Upload and Process CSV file")

    # Boolean variable to track if the initial upload button is clicked
    upload_clicked = False

    # Add a file uploader widget
    uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

    # Add a button to trigger file processing
    if st.button("Process File"):
        # Set upload_clicked to True when the Process File button is clicked
        upload_clicked = True

    # Check if upload_clicked is True before showing the additional button
    if upload_clicked:
        # Additional button to show up only when the initial button is clicked
        if uploaded_file is not None:
            # Function to process the uploaded file
            def process_file():
                # Read the uploaded file as a DataFrame
                df = pd.read_csv(uploaded_file)
                # Display the DataFrame
                st.write(df)

            # Button to trigger file processing
            if st.button("Show Uploaded Data"):
                process_file()

if __name__ == "__main__":
    main()

import pandas as pd
import pandas_profiling
from pandas_profiling import ProfileReport
# Function to generate pandas profiling report
def generate_report():
    profile = ProfileReport(data, title='Pandas Profiling Report', explorative=True)
    return profile

# Add a Streamlit button
if st.button('Generate Pandas Profiling Report'):
    # Generate and display the report
    profile = generate_report()
    st_profile_report(profile)

#! pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip
